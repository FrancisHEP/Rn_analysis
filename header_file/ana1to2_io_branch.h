//Input File Branches Assignment
ch->SetBranchAddress("runNo", &runNo);
ch->SetBranchAddress("trigNo", &trigNo);
ch->SetBranchAddress("fileNo", &fileNo);
ch->SetBranchAddress("time", &time);
ch->SetBranchAddress("triggerTime", &triggerTime);
ch->SetBranchAddress("Time2PreviousTrig", &Time2PreviousTrig);
ch->SetBranchAddress("TotQPreviousTrig", &TotQPreviousTrig);
ch->SetBranchAddress("TotQThisTrig", &TotQThisTrig);
ch->SetBranchAddress("nS1", &nS1);
ch->SetBranchAddress("s1max", &s1max);
ch->SetBranchAddress("nS2", &nS2);
ch->SetBranchAddress("s2max", &s2max);
ch->SetBranchAddress("SingleS2", &SingleS2);

ch->SetBranchAddress("xS1B", xS1B);
ch->SetBranchAddress("yS1B", yS1B);
ch->SetBranchAddress("xS1T", xS1T);
ch->SetBranchAddress("yS1T", yS1T);
ch->SetBranchAddress("qS1", qS1);
ch->SetBranchAddress("qS1B", qS1B);
ch->SetBranchAddress("qS1T", qS1T);
ch->SetBranchAddress("tS1", tS1);
ch->SetBranchAddress("ttenS1", ttenS1);
ch->SetBranchAddress("wS1", wS1);
ch->SetBranchAddress("wtenS1", wtenS1);
ch->SetBranchAddress("fwhmS1", fwhmS1);
ch->SetBranchAddress("hS1", hS1);
ch->SetBranchAddress("pS1", pS1);
ch->SetBranchAddress("qS1Veto", qS1Veto);
ch->SetBranchAddress("S1Density", S1Density);
ch->SetBranchAddress("S1NPeaks", S1NPeaks);
ch->SetBranchAddress("nS1BSatur", nS1BSatur);
ch->SetBranchAddress("nS1TSatur", nS1TSatur);
ch->SetBranchAddress("S1PS40", S1PS40);
ch->SetBranchAddress("S1PS60", S1PS60);
ch->SetBranchAddress("S1PS100", S1PS100);
ch->SetBranchAddress("S1PSS40", S1PSS40);
ch->SetBranchAddress("S1PSS60", S1PSS60);
ch->SetBranchAddress("S1PSS100", S1PSS100);
ch->SetBranchAddress("S1Decay10", S1Decay10);
ch->SetBranchAddress("S1Decay30", S1Decay30);
ch->SetBranchAddress("S1Decay60", S1Decay60);

ch->SetBranchAddress("xS2B", xS2B);
ch->SetBranchAddress("yS2B", yS2B);
ch->SetBranchAddress("xS2T", xS2T);
ch->SetBranchAddress("yS2T", yS2T);
ch->SetBranchAddress("xS2NN", xS2NN);
ch->SetBranchAddress("yS2NN", yS2NN);
ch->SetBranchAddress("chi2", chi2);
ch->SetBranchAddress("qS2", qS2);
ch->SetBranchAddress("qS2B", qS2B);
ch->SetBranchAddress("qS2T", qS2T);
ch->SetBranchAddress("tS2", tS2);
ch->SetBranchAddress("ttenS2", ttenS2);
ch->SetBranchAddress("wS2", wS2);
ch->SetBranchAddress("wtenS2", wtenS2);
ch->SetBranchAddress("fwhmS2", fwhmS2);
ch->SetBranchAddress("hS2", hS2);
ch->SetBranchAddress("pS2", pS2);
ch->SetBranchAddress("nS2BSatur", nS2BSatur);
ch->SetBranchAddress("nS2TSatur", nS2TSatur);

//Output File Branches Assignment
outTree->Branch("runNo", &runNo, "runNo/I");
outTree->Branch("trigNo", &trigNo, "trigNo/I");
outTree->Branch("fileNo", &fileNo, "fileNo/I");
outTree->Branch("time", &time, "time/i");
outTree->Branch("triggerTime", &triggerTime, "triggerTime/D");
outTree->Branch("Time2PreviousTrig", &Time2PreviousTrig, "Time2PreviousTrig/D");
outTree->Branch("TotQPreviousTrig", &TotQPreviousTrig, "TotQPreviousTrig/D");
outTree->Branch("TotQThisTrig", &TotQThisTrig, "TotQThisTrig/D");
outTree->Branch("nS1", &nS1, "nS1/i");
outTree->Branch("s1max", &s1max, "s1max/I");
outTree->Branch("nS2", &nS2, "nS2/i");
outTree->Branch("s2max", &s2max, "s2max/I");
outTree->Branch("SingleS2", &SingleS2, "SingleS2/i");


outTree->Branch("xS1B", xS1B, "xS1B[nS1]/D");
outTree->Branch("yS1B", yS1B, "yS1B[nS1]/D");
outTree->Branch("xS1T", xS1T, "xS1T[nS1]/D");
outTree->Branch("yS1T", yS1T, "yS1T[nS1]/D");
outTree->Branch("qS1", qS1, "qS1[nS1]/D");
outTree->Branch("qS1B", qS1B, "qS1B[nS1]/D");
outTree->Branch("qS1T", qS1T, "qS1T[nS1]/D");
outTree->Branch("tS1", tS1, "tS1[nS1]/D");
outTree->Branch("ttenS1", ttenS1, "ttenS1[nS1]/D");
outTree->Branch("wS1", wS1, "wS1[nS1]/D");
outTree->Branch("wtenS1", wtenS1, "wtenS1[nS1]/D");
outTree->Branch("fwhmS1", fwhmS1, "fwhm[nS1]/D");
outTree->Branch("hS1", hS1, "hS1[nS1]/D");
outTree->Branch("pS1", pS1, "pS1[nS1]/D");
outTree->Branch("qS1Veto",qS1Veto,"qS1Veto[nS1]/D");
outTree->Branch("S1Density",S1Density,"S1Density[nS1]/i");
outTree->Branch("S1NPeaks",S1NPeaks,"S1NPeaks[nS1]/i");
outTree->Branch("nS1TSatur",nS1TSatur,"nS1TSatur[nS1]/i");
outTree->Branch("nS1BSatur",nS1BSatur,"nS1BSatur[nS1]/i");
outTree->Branch("S1PS40", S1PS40, "S1PS40[nS1]/D");
outTree->Branch("S1PS60", S1PS60, "S1PS60[nS1]/D");
outTree->Branch("S1PS100", S1PS100, "S1PS100[nS1]/D");
outTree->Branch("S1PSS40", S1PSS40, "S1PSS40[nS1]/D");
outTree->Branch("S1PSS60", S1PSS60, "S1PSS60[nS1]/D");
outTree->Branch("S1PSS100", S1PSS100, "S1PSS100[nS1]/D");
outTree->Branch("S1Decay10", S1Decay10, "S1Decay10[nS1]/D");
outTree->Branch("S1Decay30", S1Decay30, "S1Decay30[nS1]/D");
outTree->Branch("S1Decay60", S1Decay60, "S1Decay60[nS1]/D");

outTree->Branch("xS2B", xS2B, "xS2B[nS2]/D");
outTree->Branch("yS2B", yS2B, "yS2B[nS2]/D");
outTree->Branch("xS2T", xS2T, "xS2T[nS2]/D");
outTree->Branch("yS2T", yS2T, "yS2T[nS2]/D");
outTree->Branch("xS2NN", xS2NN, "xS2NN[nS2]/D");
outTree->Branch("yS2NN", yS2NN, "yS2NN[nS2]/D");
outTree->Branch("chi2", chi2, "chi2[nS2]/D");
outTree->Branch("xS2LRF", xS2LRF, "xS2LRF[nS2]/D");
outTree->Branch("yS2LRF", yS2LRF, "yS2LRF[nS2]/D");
outTree->Branch("LRFchi2", LRFchi2, "LRFchi2[nS2]/D");
outTree->Branch("tS2", tS2, "tS2[nS2]/D");
outTree->Branch("ttenS2", ttenS2, "ttenS2[nS2]/D");
outTree->Branch("qS2T", qS2T, "qS2T[nS2]/D");
outTree->Branch("qS2B", qS2B, "qS2B[nS2]/D");
outTree->Branch("qS2", qS2, "qS2[nS2]/D");
outTree->Branch("wS2", wS2, "wS2[nS2]/D");
outTree->Branch("wtenS2", wtenS2, "wtenS2[nS2]/D");
outTree->Branch("fwhmS2", fwhmS2, "fwhmS2[nS2]/D");
outTree->Branch("hS2", hS2, "hS2[nS2]/D");
outTree->Branch("pS2", pS2, "pS2[nS2]/D");
outTree->Branch("nS2TSatur",nS2TSatur,"nS2TSatur[nS2]/i");
outTree->Branch("nS2BSatur",nS2BSatur,"nS2BSatur[nS2]/i");
